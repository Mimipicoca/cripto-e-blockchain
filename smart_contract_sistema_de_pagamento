// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract CryptoPay {
    address public owner;

    struct Block {
        uint256 valorEmReal;
        uint256 valorEmDolares;
        string criptoEscolhida;
        uint256 quantidadeCripto;
    }

    Block[] public blockchain;

    
    AggregatorV3Interface internal ethUsdPriceFeed;

    modifier onlyOwner() {
        require(msg.sender == owner, "only the owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;

        ethUsdPriceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);
    }

    function obterPreco(string memory) public view returns (uint256) {
        (, int256 price, , ,) = ethUsdPriceFeed.latestRoundData();
        return uint256(price);
    }

    function converterParaDolares(uint256 valorEmReal, uint256 taxaCambio) public pure returns (uint256) {
        return valorEmReal / taxaCambio;
    }

    function converterParaCripto(uint256 valorEmDolares, uint256 precoEmDolar) public pure returns (uint256) {
        return valorEmDolares / precoEmDolar;
    }

    function realizarTransacao(uint256 valorEmReal, string memory criptoEscolhida) public onlyOwner {
        uint256 taxaCambioDolar = 489; // Assuming a fixed exchange rate for demonstration purposes
        uint256 valorEmDolares = converterParaDolares(valorEmReal, taxaCambioDolar);

        uint256 precoEmDolar = obterPreco(criptoEscolhida);

        uint256 quantidadeCripto = converterParaCripto(valorEmDolares, precoEmDolar);

        Block memory novoBloco = Block({
            valorEmReal: valorEmReal,
            valorEmDolares: valorEmDolares,
            criptoEscolhida: criptoEscolhida,
            quantidadeCripto: quantidadeCripto
        });

        blockchain.push(novoBloco);

        emit TransacaoConcluida(
            valorEmReal,
            valorEmDolares,
            criptoEscolhida,
            quantidadeCripto
        );
    }

    event TransacaoConcluida(
        uint256 valorEmReal,
        uint256 valorEmDolares,
        string criptoEscolhida,
        uint256 quantidadeCripto
    );
}
